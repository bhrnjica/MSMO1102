mean(data1$x, na.rm = T)
mean(data1$x, na.rm = T)
data1 <- read.table("data/data1.txt", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE,);
print(data1)
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
mean(data1$x, na.rm = T)
mean(data1$x, na.rm = T)
mean(data1$x)
str(data1)
data1$x = as.numeric(data1$x);
#prikaz podataka
mean(data1$x)
xsr = mean(data1$x);
ysr = mean(data1$y);
xsr
ysr
lrmodel = lm(formula,data1)
formula = y ~ x
#linearni regresijski model
lrmodel = lm(formula,data1)
lrmodel
data1
data1 <- read.table("data/data1.txt", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1 <- read.table("data/podaci.txt", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1 <- read.table("data/podaci.txt", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
data1 <- read.csv("data/podaci.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
data1 <- read.csv("data/podaci1.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prva kolona mora biti numerička
data1$x = as.numeric(data1$x);
#prikaz podataka
data1
#statistika
xsr = mean(data1$x);
ysr = mean(data1$y);
#formiranje linearnog regresijskog modela u obliku y= b0 + b1x
#definisanje formule u R programskom jeziku
formula = y ~ x
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
xi = c(23,13,15,14)
xi = c(23,13,15,14)
yi = predict(lrmodel, xi)
yi = predict(lrmodel, 23)
new <- data.frame(x = seq(23, 13, 15, 14))
x = seq(23, 13, 15, 14)
x = c(23, 13, 15, 14)
yi = predict(lrmodel, x)
yi = predict(lrmodel, data = x)
yi
x = c(23)
yi = predict(lrmodel, data = x)
yi
predict(lrmodel, data = x)
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lrmodel, new, se.fit = TRUE)
pred.w.plim <- predict(lrmodel, new, interval = "prediction")
pred.w.clim <- predict(lrmodel, new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[, -1]),         lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
data1 <- read.csv("data/podaci1.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1
#statistika
xsr = mean(data1$x);
ysr = mean(data1$y);
#formiranje linearnog regresijskog modela u obliku y= b0 + b1x
#definisanje formule u R programskom jeziku
formula = y ~ x
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
new <- data.frame(x = seq(23, 2))
predict(lrmodel, new, se.fit = TRUE)
data1 <- read.csv("data/podaci1.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
xsr = mean(data1$x);
ysr = mean(data1$y);
#formiranje linearnog regresijskog modela u obliku y= b0 + b1x
#definisanje formule u R programskom jeziku
formula = y ~ x
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
#korisšetenj modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x = seq(23, 2))
new <- data.frame(x = c(23, 2))
predict(lrmodel, new)
new
predict(lrmodel, new, se.fit = TRUE)
pred.w.plim <- predict(lrmodel, new, interval = "prediction")
pred.w.clim <- predict(lrmodel, new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[, -1]),         lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
predict(lrmodel, new)
pred.w.plim <- predict(lrmodel, new, interval = "prediction")
pred.w.clim <- predict(lrmodel, new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[, -1]),         lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
new$y = predict(lrmodel, new)
plot(new$x,new$y)
line(new$x, new$y)
new <- data.frame(x = c(23, 2))
new$y = predict(lrmodel, new)
matplot(new$x, new$y),
lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
matplot(new$x, new$y,         lty = c(1, 2, 2, 3, 3), type = "l", ylab = "predicted y")
plot(data1)
abline(new$x, new$y)
lines(new$x, new$y, col="red")
data1 <- read.csv("data/podaci2.csv", header = F, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1 <- read.csv("data/podaci2.csv", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
xsr = mean(data1$x);
x2sr = mean(data1$x1);
x2sr = mean(data1$x2);
ysr = mean(data1$y);
formula = y ~ x1+x2
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
#korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x = c(23, 2))
new$y = predict(lrmodel, new)
new <- data.frame(x1 = c(23, 22), x2 = c(3, 2))
new$y = predict(lrmodel, new)
lines(new$x, new$y, col="red")
new$y
#Učitavanje podataka data1 <- read.csv("data/podaci2.csv", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE); #strukture podataka str(data1) #prikaz podataka data1 #statistika x1sr = mean(data1$x1); x2sr = mean(data1$x2); ysr = mean(data1$y); #formiranje linearnog regresijskog modela u obliku y= b0 + b1x #definisanje formule u R programskom jeziku formula = y ~ x1+x2 #linearni regresijski model  lrmodel = lm(formula, data1) #prikaz koeficijenata regresijskog modela lrmodel
data1 <- read.csv("data/shipment.txt", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.csv("data/shipment.txt", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.table("data/shipment.txt", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.table("data/shipment.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.table("data/shipment.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
x1sr = mean(data1$x1);
x1sr = mean(data1$x);
ysr = mean(data1$y);
#formiranje linearnog regresijskog modela u obliku y= b0 + b1x
#definisanje formule u R programskom jeziku
plot(data1)
piecewise2 <- lm(y ~ x * (x < 12) + x * (x >= 12))
data1 <- read.table("data/shipment.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
x1sr = mean(data1$x);
ysr = mean(data1$y);
##grafički prikaz i određivanje tačke prekida i prelaska jedna na drugu regresijski pravu
plot(data1)
#vidimo da za x=12 imamo prelaz, pa ce model po dijelovima imati sljedeci oblik
piecewise2 <- lm(y ~ x * (x < 12) + x * (x >= 12))
formula <- y ~ x * (x < 12) + x * (x >= 12)
lrmodel = lm(formula, data1)
formula <- y ~ x * (x < 12) + x * (x >= 12)
lrmodel = lm(formula, data1)
data1 <- read.table("data/shipment.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
x1sr = mean(data1$x);
ysr = mean(data1$y);
##grafički prikaz i određivanje tačke prekida i prelaska jedna na drugu regresijski pravu
plot(data1)
#vidimo da za x=12 imamo prelaz, pa ce model po dijelovima imati sljedeci oblik
formula <- y ~ x * (x < 12) + x * (x >= 12)
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
#korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x1 = c(23, 22), x2 = c(3, 2))
new$y = predict(lrmodel, new)
plot(data1)
#add regression line
lines(new$x, new$y, col="red")
summary(piecewise2)
piecewise2 = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
summary(piecewise2)
#korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x = c(5, 20))
new$y = predict(piecewise, new)
piecewise = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
summary(piecewise2)
#korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x = c(5, 20))
new$y = predict(piecewise, new)
ing
>  lines(new$x, new$y, col="red")
curve(piecewise, add = T, from = 1, to = 15)
curve(piecewise, add = T, from = 15, to = max(x))
piecewise = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
summary(piecewise2)
#korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti
new <- data.frame(x = c(5, 20))
new$y = predict(piecewise, new)
#iscrtavanje
plot(x, y, ylim = c(5, 20), pch = 16)
plot(data1, ylim = c(5, 20), pch = 16)
plot(data1, ylim = c(12, 20), pch = 16)
plot(data1$x, data1$y, ylim = c(12, 20), pch = 16)
new$y = predict(piecewise, new)
new
data1 <- read.table("data/shipment.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
x1sr = mean(data1$x);
ysr = mean(data1$y);
##grafički prikaz i određivanje tačke prekida i prelaska jedna na drugu regresijski pravu
plot(data1)
#vidimo da za x=12 imamo prelaz, pa ce model po dijelovima imati sljedeci oblik
formula <- y ~ x * (x < 12) + x * (x >= 12)
#linearni regresijski model
piecewise = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
summary(piecewise2)
data1 <- read.csv("data/podaci1.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE); #strukture podataka str(data1) #prikaz podataka data1 #statistika xsr = mean(data1$x); ysr = mean(data1$y); #formiranje linearnog regresijskog modela u obliku y= b0 + b1x #definisanje formule u R programskom jeziku formula = y ~ x #linearni regresijski model  lrmodel = lm(formula, data1) #prikaz koeficijenata regresijskog modela lrmodel #korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti new <- data.frame(x = c(23, 2)) new$y = predict(lrmodel, new) plot(data1) #add regression line lines(new$x, new$y, col="red")
data1 <- read.csv("data/podaci2.csv", header = T, col.names = c("x1","x2", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE); #strukture podataka str(data1) #prikaz podataka data1 #statistika x1sr = mean(data1$x1); x2sr = mean(data1$x2); ysr = mean(data1$y); #formiranje linearnog regresijskog modela u obliku y= b0 + b1x #definisanje formule u R programskom jeziku formula = y ~ x1+x2 #linearni regresijski model  lrmodel = lm(formula, data1) #prikaz koeficijenata regresijskog modela lrmodel #korištenje modela za izračunavanje vrijednosti podataka za testiranje odnosnoe predvidjanje vrijednosti new <- data.frame(x1 = c(23, 22), x2 = c(3, 2)) new$y = predict(lrmodel, new) plot(data1) #add regression line lines(new$x, new$y, col="red")
lines(new$x, new$y, col="red")
library(lattice)
cloud(formula, data = data1)
maintainer="Soils"
cloud(formula, data = data1,     groups = Depth,     maintainer="Soils"     )
cloud(formula, data = data1,     groups = Depth,     main="Soils"     )
cloud(formula, data = data1,     pch=16,     main="Soils"     )
cloud(formula, data = data1,     pch=16,# vrsta tačaka     main="Grafički prikaz y=f(x1,x2)"     )
library(scatterplot3d)
library(scatterplot3d)
sp1 <- scatterplot3d(data1$x1, data1$x2, data1$y)
sp1 <- scatterplot3d(data1$x1, data1$x2, data1$y, pch = 16)
sp1 <- scatterplot3d(data1$x1, data1$x2, data1$y, pch = 16, highlight.3d = T)
sp1$plane3d(lrmodel, lty.box = "solid")
regg <- plot3d(data1$x1, data1$x2, data1$y, type="s", radius=0.2, col ="blue")
library(rgl)
#3d Plot
library(rgl)
regg <- plot3d(data1$x1, data1$x2, data1$y, type="s", radius=0.2, col ="blue")
data1 <- read.table("data/podace3.txt", header = T, dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data(mtcars)
data(mtcars)
data1= data(mtcars)
data1
str(data1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,        panel = panel.smooth, rows = 1)
mtcars
data1 <- read.csv("data/mtcars.txt", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
str(data1)
data1 <- read.csv("data/mtcars.txt", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
str(data1)
data1 <- read.csv("data/mtcars.txt", header = T, sep = "\t", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
str(data1)
data1 <- read.csv("data/mtcars.txt", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
str(data1)
data1
mtcars
data1 <- read.csv("data/mtcars.txt", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1
str(data1)
str(mtcars)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,        panel = panel.smooth, rows = 1)
data1 <- read.csv("data/mtcars.txt", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.csv("data/mtcars.txt", header = T, sep = ",", dec = ".", skip=28, strip.white = TRUE, stringsAsFactors = FALSE);
data1
data1 <- read.csv("data/pm_data.csv", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
str(data1)
data1 <- read.csv("data/pm_data.csv", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1
data1 <- read.csv("data/pm_data.csv", header = T, sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
data1 <- read.csv("data/pm_data.csv", header = T, sep = ",", dec = ".", strip.white = TRUE, skip = 1, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
data1$defekt = data1$defekt == 1
str(data1)
data1$provider = as.factor(data1$provider);
data1$team = as.factor(data1$team);
str(data1)
boxplot(data = data1,x=data1$defekt)
boxplot(defekt ~ prvider, data = data1)
str(data1)
boxplot(team ~ vijek, data = data1)
plot(team ~ vijek, data = data1)
boxplot(team ~ vijek, data = data1)
boxplot(defekt ~ vijek, data = data1)
boxplot(vijek ~ defekt, data = data1)
boxplot(vijek ~ defekt, data = data1,subset = team)
boxplot(vijek ~ defekt, data = data1, xlab = "Stanje mašina", ylab = "Vijek mašine (sedmica)")
boxplot(vijek ~ defekt, data = data1, main = "Zivotni vijeka mašina", xlab = "Stanje mašina", ylab = "Vijek mašine (sedmica)")
data1 <- read.csv("data/pm_data.csv", header = T, sep = ",", dec = ".", strip.white = TRUE, skip = 1, stringsAsFactors = FALSE); #strukture podataka str(data1) #konverzija defekt varijable u binarnu data1$defekt = as.factor(data1$defekt); #konverzija kolona u kategoričnne tipove data1$provider = as.factor(data1$provider); data1$team = as.factor(data1$team); #prikaz zivotnog vijeka mašina  # TRUE - pokvarene mašine imaju preko 60 sedmica vijek. boxplot(vijek ~ defekt, data = data1,      #     main = "Životni vijeka mašina", xlab = "Stanje mašine", ylab = "Vijek mašine (sedmica)")
data1$defekt = data1$defekt == 1
#konverzija kolona u kategoričnne tipove
data1$provider = as.factor(data1$provider);
data1$team = as.factor(data1$team);
#prikaz zivotnog vijeka mašina
# TRUE - pokvarene mašine imaju preko 60 sedmica vijek.
boxplot(vijek ~ defekt, data = data1,      #     main = "Životni vijeka mašina", xlab = "Stanje mašine", ylab = "Vijek mašine (sedmica)")
formula = vijek ~ pritisak + vlaga + temparatura + team + provider;
survreg(fromula, data = maintenance, dist = "gaussian")
model = survreg(fromula, data = maintenance, dist = "gaussian")
summary(model)
summary(model)
model = survreg(fromula, data = maintenance, dist = "gaussian")
summary(model)
model = survreg(fromula, data = data1, dist = "gaussian")
model = glm(fromula, data = data1, dist = "gaussian")
formula = vijek ~ pritisak + vlaga + temparatura + team + provider;
model = glm(fromula, data = data1, dist = "gaussian")
formula = defekt ~ vijek + pritisak + vlaga + temparatura + team + provider;
model = glm(fromula, data = data1, dist = "gaussian")
model = glm(fromula, data = data1, family = "binomial")
formula = defekt ~ vijek + pritisak + vlaga + temparatura + team + provider;
model = glm(formula, data = data1, family = "binomial")
data1$defekt = data1$defekt == 1
#konverzija kolona u kategoričnne tipove
data1$provider = as.factor(data1$provider);
data1$team = as.factor(data1$team);
#prikaz zivotnog vijeka mašina
# TRUE - pokvarene mašine imaju preko 60 sedmica vijek.
boxplot(vijek ~ defekt, data = data1,      #     main = "Životni vijeka mašina", xlab = "Stanje mašine", ylab = "Vijek mašine (sedmica)")
formula = defekt ~ vijek + pritisak + vlaga + temparatura + team + provider;
model = glm(formula, data = data1, family = "binomial")
summary(model)
model = glm(formula, data = data1, family = "gaussian")
summary(model)
help(summary.lm)
data1 <- c(11, 12, 14, 22, 27, 29, 31, 38, 42, 49, 54, 55, 56, 62, 64, 65, 70, 81, 83, 85, 92, 96);
#strukture podataka
str(data1)
#prikaz podataka
data1
#statistika
xsr = mean(data1);
a_mod = Mod(data1);
a_mod
a_mod = mode(data1);
a_mod
a_medijan <- median(data1);
a_medijan
x = c(370, 1016, 1235, 1419, 1567, 1820,        706, 1018, 1238, 1420, 1578, 1868,        716, 1020, 1252, 1420, 1594, 1881,        746, 1055, 1258, 1450, 1602, 1890,        785, 1085, 1262, 1452, 1604, 1893,        797, 1102, 1269, 1475, 1608, 1895,        844, 1102, 1270, 1478, 1630, 1910,        855, 1108, 1290, 1481, 1642, 1923,        858, 1115, 1293, 1485, 1674, 1940,        886, 1120, 1300, 1502, 1730, 1945,        886, 1134, 1310, 1505, 1750, 2023,        930, 1140, 1313, 1513, 1750, 2100,        960, 1199, 1315, 1522, 1763, 2130,        988, 1200, 1330, 1522, 1768, 2215,        990, 1200, 1355, 1530, 1781, 2268,       1000, 1203, 1390, 1540, 1782, 2440,       1010, 1222, 1416, 1560, 1792)
x = c(370, 1016, 1235, 1419, 1567, 1820,        706, 1018, 1238, 1420, 1578, 1868,        716, 1020, 1252, 1420, 1594, 1881,        746, 1055, 1258, 1450, 1602, 1890,        785, 1085, 1262, 1452, 1604, 1893,        797, 1102, 1269, 1475, 1608, 1895,        844, 1102, 1270, 1478, 1630, 1910,        855, 1108, 1290, 1481, 1642, 1923,        858, 1115, 1293, 1485, 1674, 1940,        886, 1120, 1300, 1502, 1730, 1945,        886, 1134, 1310, 1505, 1750, 2023,        930, 1140, 1313, 1513, 1750, 2100,        960, 1199, 1315, 1522, 1763, 2130,        988, 1200, 1330, 1522, 1768, 2215,        990, 1200, 1355, 1530, 1781, 2268,       1000, 1203, 1390, 1540, 1782, 2440,       1010, 1222, 1416, 1560, 1792)
x = c(370, 1016, 1235, 1419, 1567, 1820,        706, 1018, 1238, 1420, 1578, 1868,        716, 1020, 1252, 1420, 1594, 1881,        746, 1055, 1258, 1450, 1602, 1890,        785, 1085, 1262, 1452, 1604, 1893,        797, 1102, 1269, 1475, 1608, 1895,        844, 1102, 1270, 1478, 1630, 1910,        855, 1108, 1290, 1481, 1642, 1923,        858, 1115, 1293, 1485, 1674, 1940,        886, 1120, 1300, 1502, 1730, 1945,        886, 1134, 1310, 1505, 1750, 2023,        930, 1140, 1313, 1513, 1750, 2100,        960, 1199, 1315, 1522, 1763, 2130,        988, 1200, 1330, 1522, 1768, 2215,        990, 1200, 1355, 1530, 1781, 2268,       1000, 1203, 1390, 1540, 1782, 2440,       1010, 1222, 1416, 1560, 1792)
par(mfrow = c(2, 2), bg = rgb(1, 1, 0.8))
dotchart(x, xlab = "Polished Window Strength (ksi)")
boxplot(x, ylab = "Polished Window Strength (ksi)")
hist(x, ylab = "Counts", xlab = "Polished Window Strength (ksi)", main = "")
plot(density(x), xlab = "Polished Window Strength (ksi)", main = "")
## Generate QQ-plot of the data.
par(mfrow = c(1, 1), bg = rgb(1, 1, 0.8))
qqnorm(x, pch = 20, col = "Red")
## Plot 99 samples from the data and compare QQ-plots to actual data.
x.ave = mean(x);
x.sd = sd(x)
nx = length(x)
nb = 99
u = qnorm(ppoints(nx))
xb = array(dim = c(nx, nb))
for (jb in 1:nb) {     xb[, jb] = sort(qqnorm(rnorm(nx, mean = x.ave, sd = x.sd),    plot = FALSE)$y) }
par(mfrow = c(1, 1), bg = rgb(1, 1, 0.8))
zz = qqnorm(x, pch = 20, col = "Red")
matplot(u, xb, type = "p", pch = 21, col = "Blue", add = TRUE)
points(zz$x, zz$y, pch = 20, col = "Red")
## Compare QQ-plots of the data for various distributions
## using maximum likelihood estimation.
require(stats4)
negloglik.gau = function(mu, sigma) {     if (sigma < 0) { return(Inf) } else {         -sum(dnorm(x, mean = mu, sd = sigma, log = TRUE))     } }
x.gau = mle(negloglik.gau, method = "Nelder-Mead",            start = list(mu = mean(x), sigma = sd(x)))
x.gau@coef
> mu sigma
> 1400.8145 389.3003
negloglik.gam = function(alpha, lambda) {     if (any(c(alpha, lambda) < 0)) { return(Inf) } else {         -sum(dgamma(x, shape = alpha, rate = lambda, log = TRUE))     } }
x.gam = mle(negloglik.gam, method = "Nelder-Mead",            start = list(alpha = (mean(x) / sd(x)) ^ 2,            lambda = mean(x) / var(x)))
x.gam@coef
# 11.851717840 0.008459428
require(bs)
negloglik.bs = function(alpha, beta) {     if (any(c(alpha, beta) < 0)) { return(Inf) } else {         -sum(dbs(x, alpha, beta, log = TRUE))     } }
x.bs = mle(negloglik.bs, method = "Nelder-Mead",            start = list(alpha = 0.25, beta = 30))
x.bs@coef
# 0.3100202 1336.7948970
negloglik.wei = function(xi, beta, eta) {     -sum(dweibull(x - xi, shape = beta, scale = eta, log = TRUE)) }
x.wei = mle(negloglik.wei, method = "L-BFGS-B",             lower = c(-Inf, 0, 0),             start = list(xi = 100, beta = 2, eta = 15))
x.wei@coef
# 181.154738 3.428001 1356.441176
## Plot overlaid density for each distribution.
xl = mean(x) - 3 * sd(x);
xu = mean(x) + 3 * sd(x)
plot(density(x, from = xl, to = xu), ylim = c(0, 0.0012), main = "")
curve(dnorm(x, mean = x.gau@coef[1], sd = x.gau@coef[2]),       from = xl, to = xu, col = "LightBlue", add = TRUE, lwd = 2)
curve(dgamma(x, shape = x.gam@coef[1], rate = x.gam@coef[2]),       from = xl, to = xu, col = "Brown", add = TRUE, lwd = 2)
curve(dbs(x, alpha = x.bs@coef[1], beta = x.bs@coef[2]),       from = xl, to = xu, col = "Red", add = TRUE, lwd = 2)
curve(dweibull(x - x.wei@coef[1], shape = x.wei@coef[2],       scale = x.wei@coef[3]),       from = xl, to = xu, col = "Purple", add = TRUE, lwd = 2)
legend(1700, 0.0012, bty = "n",        legend = c("Data", "Gaussian", "Gamma",                 "Birnbaum-Saunders", "Weibull"),        lty = c(1, 1, 1, 1, 1),        col = c("Black", "LightBlue", "Brown", "Red", "Purple"))
## Generate QQ-plots for each distribution and overlay.
xy.gau = list(x = sort(qnorm(ppoints(x),               mean = x.gau@coef[1], sd = x.gau@coef[2])),               y = sort(x))
xy.gam = list(x = sort(qgamma(ppoints(x),               shape = x.gam@coef[1], rate = x.gam@coef[2])),               y = sort(x))
xy.bs = list(x = sort(qbs(ppoints(x),              alpha = x.bs@coef[1], beta = x.bs@coef[2])),              y = sort(x))
xy.wei = list(x = sort(x.wei@coef[1] + qweibull(ppoints(x),               shape = x.wei@coef[2], scale = x.wei@coef[3])),               y = sort(x))
plot(xy.gau, pch = 15, col = "LightBlue",      xlab = "Theoretical Quantiles",      ylab = "Sample Quantiles")
points(xy.gam, pch = 16, col = "Brown")
points(xy.bs, pch = 17, col = "Red")
points(xy.wei, pch = 18, col = "Purple")
legend(500, 2400, bty = "n",        legend = c("Gaussian", "Gamma",        "Birnbaum-Saunders", "Weibull"), pch = c(15, 16, 17, 18),        col = c("LightBlue", "Brown", "Red", "Purple"))
## Compute AIC and BIC for each distribution.
aic = c(GAU = AIC(x.gau, k = 2), GAM = AIC(x.gam, k = 2),         BS = AIC(x.bs, k = 2), WEI = AIC(x.wei, k = 2))
bic = c(GAU = AIC(x.gau, k = log(nx)), GAM = AIC(x.gam, k = log(nx)),         BS = AIC(x.bs, k = log(nx)), WEI = AIC(x.wei, k = log(nx)))
signif(cbind(AIC = aic, BIC = bic), 4)
post = exp(-0.5 * (bic - 1500)) / sum(exp(-0.5 * (bic - 1500)))
cbind(signif(post, 2))
xDATA = x
nb = 5000
percentile = rep(NA, nb)
for (jb in 1:nb) {     if (jb %% 100 == 0) { cat(jb, "of", nb, "\n") }     x = sample(xDATA, size = nx, replace = TRUE)     xb.gau = try(mle(negloglik.gau, method = "Nelder-Mead",                    start = list(mu = mean(x), sigma = sd(x))))     xb.gam = try(mle(negloglik.gam, method = "Nelder-Mead",                    start = list(alpha = (mean(x) / sd(x)) ^ 2,                               lambda = mean(x) / var(x))))     xb.bs = try(mle(negloglik.bs, method = "Nelder-Mead",                   start = list(alpha = 0.25, beta = 30)))     xb.wei = try(mle(negloglik.wei, method = "Nelder-Mead",                    start = list(xi = 100, beta = 2, eta = 15)))     if (any(c(class(xb.gau), class(xb.gam), class(xb.bs),             class(xb.wei)) == "try-error")) { next } else {                 bic = c(GAU = AIC(x.gau, k = log(nx)),                         GAM = AIC(x.gam, k = log(nx)),                         BS = AIC(x.bs, k = log(nx)),                         WEI = AIC(x.wei, k = log(nx)))                 ib = which.min(bic)                 percentile[jb] = switch(ib,                           qnorm(0.001, mean = xb.gau@coef[1],                                 sd = xb.gau@coef[2]),                           qgamma(0.001, alpha = xb.gam@coef[1],                                  lambda = xb.gam@coef[2]),                           qbs(0.001, alpha = xb.bs@coef[1],                               beta = xb.bs@coef[2]),                           xb.wei@coef[1] +                           qweibull(0.001, beta = xb.wei@coef[2],                                    eta = xb.wei@coef[3]))             } }
signif(quantile(percentile, probs = c(0.025, 0.975), na.rm = TRUE), 3)
data1 <- read.csv("data/podaci1.csv", header = F, col.names = c("x", "y"), sep = ",", dec = ".", strip.white = TRUE, stringsAsFactors = FALSE);
#strukture podataka
str(data1)
xsr = mean(data1$x);
ysr = mean(data1$y);
#formiranje linearnog regresijskog modela u obliku y= b0 + b1x
#definisanje formule u R programskom jeziku
formula = y ~ x
#linearni regresijski model
lrmodel = lm(formula, data1)
#prikaz koeficijenata regresijskog modela
lrmodel
summary(lrmodel)
new <- data.frame(x = c(23, 2))
new$y = predict(lrmodel, new)
plot(data1)
#add regression line
lines(new$x, new$y, col="red")
x = c(370, 1016, 1235, 1419, 1567, 1820,
706, 1018, 1238, 1420, 1578, 1868,
716, 1020, 1252, 1420, 1594, 1881,
746, 1055, 1258, 1450, 1602, 1890,
785, 1085, 1262, 1452, 1604, 1893,
797, 1102, 1269, 1475, 1608, 1895,
844, 1102, 1270, 1478, 1630, 1910,
855, 1108, 1290, 1481, 1642, 1923,
858, 1115, 1293, 1485, 1674, 1940,
886, 1120, 1300, 1502, 1730, 1945,
886, 1134, 1310, 1505, 1750, 2023,
930, 1140, 1313, 1513, 1750, 2100,
960, 1199, 1315, 1522, 1763, 2130,
988, 1200, 1330, 1522, 1768, 2215,
990, 1200, 1355, 1530, 1781, 2268,
1000, 1203, 1390, 1540, 1782, 2440,
1010, 1222, 1416, 1560, 1792)
par(mfrow = c(2, 2), bg = rgb(1, 1, 0.8))
dotchart(x, xlab = "Polished Window Strength (ksi)")
boxplot(x, ylab = "Polished Window Strength (ksi)")
hist(x, ylab = "Counts", xlab = "Polished Window Strength (ksi)", main = "")
plot(density(x), xlab = "Polished Window Strength (ksi)", main = "")
par(mfrow = c(1, 1), bg = rgb(1, 1, 0.8))
qqnorm(x, pch = 20, col = "Red")
x.ave = mean(x);
x.sd = sd(x)
nx = length(x)
nb = 99
u = qnorm(ppoints(nx))
xb = array(dim = c(nx, nb))
for (jb in 1:nb) {
xb[, jb] = sort(qqnorm(rnorm(nx, mean = x.ave, sd = x.sd),
plot = FALSE)$y)
}
par(mfrow = c(1, 1), bg = rgb(1, 1, 0.8))
zz = qqnorm(x, pch = 20, col = "Red")
matplot(u, xb, type = "p", pch = 21, col = "Blue", add = TRUE)
points(zz$x, zz$y, pch = 20, col = "Red")
data1 <- c(11, 12, 14, 22, 27, 27, 31, 38, 42, 49, 54, 55, 56, 62, 64, 65, 70, 81, 83, 85, 92, 96);
str(data1)
data1
a_sredina = mean(data1);
a_medijan <- median(data1);
a_medijan
